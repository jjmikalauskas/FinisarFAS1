
# Copyright 2009 Rudolph Technologies, Inc. All Rights Reserved.
# This software is provided under license and may only be used in
# accordance with the terms of the respective license agreements
# of the owners of the same software, which include, but are not
# limited to, Rudolph Technologies, Inc. Where applicable, refer
# to on-line license agreements provided with the software.

#! /bin/sh
# the next line restarts using wish \
exec wish "$0" "$@"

# interface generated by SpecTcl version 1.1 from /home/hcamp/code/mtc/ashl/astk/session.ui
#   root     is the parent window for this user interface

proc session_ui {root name} {

	global aci_comm_type
	global aci_conf
	global base



	# this treats "." as a special case
	if {$root == "."} {
	    set base ""
	} else {
	    set base $root
	}
    

	frame $base.outputframe
    
	text $base.outputframe.output \
		-cursor {} \
		-height 20 \
		-width 80 \
		-selectbackground #FFFF99 \
		-yscrollcommand "$base.outputframe.scrolloutput set"

	scrollbar $base.outputframe.scrolloutput \
		-command "$base.outputframe.output yview" \
		-orient v


	frame $base.buttonframe1

	button $base.buttonframe1.repeat \
		-command "repeat_command $base.buttonframe1.repeat 1" \
		-image aim_editrepeat \
		-text {Copy last or selected command to edit window.}

	button $base.buttonframe1.eraseoutput \
		-command "erase_output $base.buttonframe1.eraseoutput results" \
		-image aim_eraser \
		-text {Clear results from  the output window.}
	catch {
		$base.buttonframe1.eraseoutput configure \
			-font -*-Helvetica-Bold-R-Normal-*-*-120-*-*-*-*-*-*
	}

	button $base.buttonframe1.eraseall \
		-command "erase_output $base.buttonframe1.eraseall all" \
		-image aim_erasers \
		-text {Clear commands and results from output window.}
	catch {
		$base.buttonframe1.eraseall configure \
			-font -*-Helvetica-Bold-R-Normal-*-*-120-*-*-*-*-*-*
	}

	button $base.buttonframe1.showstructure \
		-command {	#add two addition ways to invoke show_struct_main for windows
				# if base exist then it was started by tktalk in the cmd line
				# else if is from tktalk was invoked from ac
				# the passed in var is unused in the show_struct_main
				# it is now being used by the window path
				if {$aci_comm_type == "ACI"} {
					global base
					if { [info exists base] && $base != "" } {
						set winname [wm title $base]
						set warray [split $winname :]
						set winname [lindex $warray 0]
						show_struct_main $winname
					} else {
						show_struct_main from_ac 
					}
						
				} else {
					show_struct_main nothing 
				}
			} \
		-image aim_struct \
		-text {Show runtime file structure}
	catch {
		$base.buttonframe1.showstructure configure \
			-font -*-Helvetica-Bold-R-Normal-*-*-120-*-*-*-*-*-*
	}

	button $base.buttonframe1.showcommands \
		-command "show_cmd_list $base.buttonframe1.showcommands" \
		-image aim_cmds \
		-text {Show list of available commands}
	catch {
		$base.buttonframe1.showcommands configure \
			-font -*-Helvetica-Bold-R-Normal-*-*-120-*-*-*-*-*-*
	}

	button $base.buttonframe1.showdvs \
		-command "launch_viewdvs $base.buttonframe1.showdvs" \
		-image aim_dvs \
		-text {Show server's Dynamic Variables.}

	button $base.buttonframe1.showlogs \
		-command "launch_viewlogs $root $name" \
		-image aim_logs \
		-text {Show server's logs.}

	frame $base.inputframe

	text $base.inputframe.commandentry \
		-height 4 \
		-width 80 \
		-yscrollcommand "$base.inputframe.scrollinput set"

	scrollbar $base.inputframe.scrollinput \
		-command "$base.inputframe.commandentry yview" \
		-orient v


	frame $base.buttonframe2

	button $base.buttonframe2.send \
		-command "send_message $base.buttonframe2.send ascommand" \
		-text Send

	button $base.buttonframe2.senddatareply \
		-command "send_message $base.buttonframe2.senddatareply asdatareply" \
		-image aim_nodo \
		-text {Send message as data or reply message (suppresses do= prefix)}
	catch {
		$base.buttonframe2.senddatareply configure \
			-font -*-Helvetica-Bold-R-Normal-*-*-120-*-*-*-*-*-*
	}

	button $base.buttonframe2.sendasis \
		-command "send_message $base.buttonframe2.sendasis asis" \
		-image aim_nofrtodo \
		-text {Send message exactly as typed.  Requires to= tag in message if sending to different server.}
	catch {
		$base.buttonframe2.sendasis configure \
			-font -*-Helvetica-Bold-R-Normal-*-*-120-*-*-*-*-*-*
	}

	button $base.buttonframe2.shell \
		-command "shell_command $base.buttonframe2.shell" \
		-image aim_shell \
		-text {Execute command using OS Shell.}
	catch {
		$base.buttonframe2.shell configure \
			-font -*-Helvetica-Bold-R-Normal-*-*-120-*-*-*-*-*-*
	}

	button $base.buttonframe2.stringexpr \
		-command "string_expression $base.buttonframe2.stringexpr" \
		-image aim_strex \
		-text {Evaluate String Expression {i.e. (+ 5 2)} locally.}
	catch {
		$base.buttonframe2.stringexpr configure \
			-font -*-Helvetica-Bold-R-Normal-*-*-120-*-*-*-*-*-*
	}

	button $base.buttonframe2.cancel \
		-command "cancel_session $base.buttonframe2.cancel" \
		-text Cancel

	if { $aci_comm_type == "ACI" } {
		label $base.buttonframe2.aci_conf \
			-background #2985B6 \
			-text [format "%s" $aci_conf]
	}


	# Geometry management

	grid $base.outputframe -in $root -row 1 -column 1 -sticky nesw
	grid $base.buttonframe1 -in $root -row 2 -column 1 -sticky nesw
	grid $base.inputframe -in $root -row 3 -column 1 -sticky nesw
	grid $base.buttonframe2 -in $root -row 4 -column 1 -sticky nesw

	grid $base.outputframe.output -in $base.outputframe -row 1 -column 1 -sticky nesw
	grid $base.outputframe.scrolloutput -in $base.outputframe -row 1 -column 2 -sticky ns

	grid $base.buttonframe1.repeat -in $base.buttonframe1 -row 1 -column 1 -sticky nesw
	grid $base.buttonframe1.eraseoutput -in $base.buttonframe1 -row 1 -column 2 -sticky nesw
	grid $base.buttonframe1.eraseall -in $base.buttonframe1 -row 1 -column 3 -sticky nesw
	grid $base.buttonframe1.showstructure -in $base.buttonframe1 -row 1 -column 9 -sticky nesw
	grid $base.buttonframe1.showcommands -in $base.buttonframe1 -row 1 -column 10 -sticky nesw
	grid $base.buttonframe1.showdvs -in $base.buttonframe1 -row 1 -column 11 -sticky nesw
	grid $base.buttonframe1.showlogs -in $base.buttonframe1 -row 1 -column 12 -sticky nesw

	grid $base.inputframe.commandentry -in $base.inputframe -row 1 -column 1 -sticky nesw
	grid $base.inputframe.scrollinput -in $base.inputframe -row 1 -column 2 -sticky ns

	grid $base.buttonframe2.send -in $base.buttonframe2 -row 1 -column 1 -columnspan 3 -sticky ns
	grid $base.buttonframe2.senddatareply -in $base.buttonframe2 -row 1 -column 4 -sticky nesw
	grid $base.buttonframe2.sendasis -in $base.buttonframe2 -row 1 -column 5 -sticky nesw
	grid $base.buttonframe2.shell -in $base.buttonframe2 -row 1 -column 6 -sticky nesw
	grid $base.buttonframe2.stringexpr -in $base.buttonframe2 -row 1 -column 7 -sticky nesw
	if { $aci_comm_type == "ACI" } {
		grid $base.buttonframe2.aci_conf -in $base.buttonframe2 -row 1 -column 8 -sticky e
	}
	grid $base.buttonframe2.cancel -in $base.buttonframe2 -row 1 -column 10 -columnspan 3 -sticky ns


	# Resize behavior management

	grid rowconfigure $root 1 -weight 1 -minsize 306
	grid rowconfigure $root 2 -weight 0 -minsize 30
	grid rowconfigure $root 3 -weight 0 -minsize 66
	grid rowconfigure $root 4 -weight 0 -minsize 30
	grid columnconfigure $root 1 -weight 1 -minsize 582

	grid rowconfigure $base.outputframe 1 -weight 1 -minsize 306
	grid columnconfigure $base.outputframe 1 -weight 1 -minsize 566
	grid columnconfigure $base.outputframe 2 -weight 0 -minsize 16

	grid rowconfigure $base.inputframe 1 -weight 0 -minsize 66
	grid columnconfigure $base.inputframe 1 -weight 1 -minsize 566
	grid columnconfigure $base.inputframe 2 -weight 0 -minsize 16

	grid rowconfigure $base.buttonframe1 1 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 1 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 2 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 3 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 4 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 5 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 6 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 7 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 8 -weight 1 -minsize 222
	grid columnconfigure $base.buttonframe1 9 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 10 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 11 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 12 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe1 13 -weight 0 -minsize 30

	grid rowconfigure $base.buttonframe2 1 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 1 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 2 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 3 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 4 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 5 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 6 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 7 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 8 -weight 1 -minsize 222
	grid columnconfigure $base.buttonframe2 9 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 10 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 11 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 12 -weight 0 -minsize 30
	grid columnconfigure $base.buttonframe2 13 -weight 0 -minsize 30


	# additional interface code
	global env
	source $env(ASTK_DIR)/session.code.tcl

	wm protocol $base WM_DELETE_WINDOW "$base.buttonframe2.cancel invoke"

	# end additional interface code

}


# Allow interface to be run "stand-alone" for testing

catch {
    if [info exists embed_args] {
	# we are running in the plugin
	session_ui .
    } else {
	# we are running in stand-alone mode
	if {$argv0 == [info script]} {
	    wm title . "Testing session_ui"
	    session_ui .
	}
    }
}
