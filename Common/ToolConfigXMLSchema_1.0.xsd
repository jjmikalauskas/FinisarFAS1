<?xml version="1.0" encoding="utf-8"?>
<xs:schema targetNamespace="http://rudolphtech.com/ToolConfigXMLSchema.xsd"
    elementFormDefault="qualified"
    xmlns="http://rudolphtech.com/ToolConfigXMLSchema.xsd"
    xmlns:mstns="http://rudolphtech.com/ToolConfigXMLSchema.xsd"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
>
 
  <xs:element name="ToolConfig">
    <xs:complexType>
      <xs:sequence>
        
        <!-- used to deytermine which type of tool is THIS instance of FAS connected to -->
        <xs:element name="ToolType" type="xs:string"/>
        
        <xs:element name="Toolid" type="xs:string"/>

        <!-- Number of ports to show on the GUI-->
        <xs:element name="NumberOfPorts" type="xs:int"/>
        
        <!-- flag to enable timer between movein and start-->
        <xs:element name="TimeoutBeforeStartFlag" type="xs:boolean"/>

        <!-- number of seconds for start timer, use only if timeoutBeforeStartFlag is true -->
        <xs:element name="TimeoutBeforeStartSeconds" type="xs:int" />

        <!-- flag to determine if all events should be enabled on initialize or only the specified events-->
        <xs:element name="EnableAllEvents" type="xs:boolean"/>

        <!-- flag to determine if all alarms should be enabled on initialize or only the specified alarms-->
        <xs:element name="EnableAllAlarms" type="xs:boolean"/>

        <!-- this flag determines if only defined events are enabled - will only be used if EventList is not empty and DefineEventsAtAppStart = true-->
        <xs:element name="EnableDefinedEventsAtAppStart" type="xs:boolean">
          <xs:annotation></xs:annotation>
        </xs:element>
      
        <!-- this flag determines if Events need to be defined at app start-->
        <xs:element name="DefineEventsAtAppStart" type="xs:boolean">
          <xs:annotation></xs:annotation>
        </xs:element>
       
        <!-- The SVID used to check control state-->
        <xs:element name="ControlStateSVID" type="xs:int"/>

        <!-- THe SVID uses to check tool level process state-->
        <xs:element name="ProcessStateSVID" type="xs:int"/>

        <!-- Flag for emailing on alarms in alarmlist -->
        <xs:element name="EmailOnAlarmsFlag" type="xs:boolean"/>

        <xs:element name="EmailAddresseesForAlarms">
          <!-- alarm email list-->
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Addressee" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <!-- Flag for emailing on app shutdown -->
        <xs:element name="EmailOnAppShutdownFlag" type="xs:boolean"/>

        <xs:element name="EmailAddresseesForAppshutdown">
          <!-- email list for app shutdown -->
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Addressee" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="TraceLogFilesPath" type="xs:string"/>
        <xs:element name="LogFilesPath" type="xs:string"/>


      
         

  <!-- List of column names to be displayed to operators in wafer table for each port - slot is always assumed to be the first column-->
        <xs:element name="OperatorWaferTableFields" >
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Field" minOccurs="1" maxOccurs="unbounded" >
                <xs:complexType>
                  <xs:attribute name="Name" type="xs:string"/>
                </xs:complexType>

              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <!-- List of column names to be displayed to engineers in wafer table for each port - slot is always assumed to be the first column-->
        <xs:element name="EngineerWaferTableFields" >
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Field" minOccurs="1" maxOccurs="unbounded" >
                <xs:complexType>
                  <xs:attribute name="Name" type="xs:string"/>
                </xs:complexType>

              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <!-- List of eq constants and their values that may need to be set on app initialization -->
        <xs:element name="EqConstValList">
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="EqConst">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element minOccurs="0" name="val" type="xs:unsignedShort" />
                    <xs:element name="name" type="xs:string" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        
       <xs:element name="EqConstList">
          <!-- List of eq constants needed to collect and send to MES at end of run-->
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="EqConst">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element minOccurs="0" name="val" type="xs:unsignedShort" />
                    <xs:element name="name" type="xs:string" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        
        
        <xs:element name="SVidList">
          <!-- List of SVIDs needed to collect and send to MES at end of run-->
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="Svid">
                <xs:complexType>
                  <xs:sequence>
                    <xs:choice maxOccurs="unbounded">
                      <xs:element name="name" type="xs:string" />
                      <xs:element name="id" type="xs:unsignedInt" />
                    </xs:choice>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        

        <xs:element name="AlarmList">
          <!-- List of alarm ids to display on GUI -->
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="Svid">
                <xs:complexType>
                  <xs:sequence>
                    <xs:choice maxOccurs="unbounded">
                      <xs:element name="name" type="xs:string" />
                      <xs:element name="id" type="xs:unsignedInt" />
                    </xs:choice>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        

        <xs:element name="TraceReports">
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="Report">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="vids">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element maxOccurs="unbounded" name="vid">
                            <xs:complexType>
                              <xs:simpleContent>
                                <xs:extension base="xs:unsignedInt">
                                  <xs:attribute name="name" type="xs:string" use="required" />
                                </xs:extension>
                              </xs:simpleContent>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute name="id" type="xs:unsignedByte" use="required" />
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>


        <xs:element name="eventReports">
          <xs:complexType>
            <xs:sequence>
              <xs:element maxOccurs="unbounded" name="report">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="vids">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element maxOccurs="unbounded" name="vid">
                            <xs:complexType>
                              <xs:simpleContent>
                                <xs:extension base="xs:unsignedInt">
                                  <xs:attribute name="name" type="xs:string" use="required" />
                                </xs:extension>
                              </xs:simpleContent>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="events">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element maxOccurs="unbounded" name="ceid">
                            <xs:complexType>
                              <xs:simpleContent>
                                <xs:extension base="xs:unsignedInt">
                                  <xs:attribute name="name" type="xs:string" use="required" />
                                </xs:extension>
                              </xs:simpleContent>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                  <xs:attribute name="id" type="xs:unsignedByte" use="required" />
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        
        
        
        
      </xs:sequence>
    </xs:complexType>

  </xs:element>

</xs:schema>
